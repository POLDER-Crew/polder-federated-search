apiVersion: batch/v1
kind: Job
metadata:
  name: setup-gleaner
spec:
  template:
    metadata:
      name: setup-gleaner
    spec:
      restartPolicy: Never
      volumes:
      - name: gleaner-config
        configMap:
          name: gleaner-config
      - name: polder-repo-config
        configMap:
          name: polder-repo-config
      - name: nabu-config
        configMap:
          name: nabu-config
      - name: gleaner-context
        emptyDir: {}
      dnsPolicy: None
      dnsConfig:
        nameservers:
          - 10.96.0.10
        searches:
        - {{ .Release.Namespace }}.svc.cluster.local
        - svc.cluster.local
        - cluster.local
        options:
        - name: ndots
          value: "5"
      initContainers:
        # Literally wait for GraphDB to come up so we can create a repository
      - name: wait-for-triplestore-up
        image: curlimages/curl:7.84.0
        command:
        - /bin/sh
        - -c
        # yes, this is how it has to work, no I am not happy about it
        - >
          set -x;
          while [ $(curl -sw '%{http_code}' "{{ include "gleaner.triplestore.endpoint" . }}/rest/repositories/" -o /dev/null) -ne 200 ]; do
            sleep 15;
          done
      # Next, create the graphdb repository that we want to use for this app
      - name: setup-triplestore
        image: curlimages/curl:7.84.0
        workingDir: /config
        volumeMounts:
        - name: polder-repo-config
          mountPath: /config
        command:
        - curl
        - -vs
        - -X
        - POST
        - -H
        - 'Content-Type:multipart/form-data'
        - -F
        - "config=@./polder.ttl"
        - "{{- include "gleaner.triplestore.endpoint" . }}/rest/repositories/"
        - --next
        - -vs
        - -X
        - POST
        - --header
        - 'Accept: application/json'
        - --data-urlencode
        - update@./lucene-connector.sparql
        - "{{- include "gleaner.triplestore.endpoint" . }}/repositories/{{ .Values.storageNamespace }}/statements"
        - --next
        - -vs
        - -X
        - POST
        - --header
        - 'Accept: application/json'
        - --data-urlencode
        - update@./geosparql.sparql
        - "{{- include "gleaner.triplestore.endpoint" . }}/repositories/{{ .Values.storageNamespace }}/statements"
      # Run gleaner setup, which creates cloud storage buckets
      - name: gleaner-setup
        image: nsfearthcube/gleaner:dev-v3.0.4-development
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
        - -cfg
        - gleaner
        - -setup
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key:  minioAccessKey
              name: {{ .Release.Name }}-secrets
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key:  minioSecretKey
              name: {{ .Release.Name }}-secrets
        workingDir: /config
        volumeMounts:
        - name: gleaner-config
          mountPath: /config/gleaner.yaml
          subPath: gleaner.yaml
      # We need the latest schema.org context, so fetch it
      - name: get-contextfiles
        image: curlimages/curl:7.84.0
        command:
        - curl
        - -O
        - https://schema.org/version/latest/schemaorg-current-https.jsonld
        volumeMounts:
        - name: gleaner-context
          mountPath: /context
        workingDir: /context
      # Dynamically create the sitemaps for BAS and GCMD, and put
      # them somewherethat Gleaner can use to crawl
      - name: build-sitemap
        image: nein09/build-sitemap:1.4
        env:
        - name: MINIO_CLIENT_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key:  minioAccessKey
              name: {{ .Release.Name }}-secrets
        - name: MINIO_CLIENT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key:  minioSecretKey
              name: {{ .Release.Name }}-secrets
        - name: MINIO_SERVER_HOST
          value: {{ include "gleaner.s3system.endpoint" . }}
        - name: MINIO_SERVER_PORT_NUMBER
          value: "{{ .Values.s3system_service.api_port }}"
        volumeMounts:
        - name: gleaner-context
          mountPath: /context
        workingDir: /context
      # Finally, index our data repositories!
      - name: gleaner-initial-index
        image: nsfearthcube/gleaner:dev-v3.0.4-development
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
        - -cfg
        - gleaner
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key:  minioAccessKey
              name: {{ .Release.Name }}-secrets
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key:  minioSecretKey
              name: {{ .Release.Name }}-secrets
        workingDir: /config
        volumeMounts:
        - name: gleaner-config
          mountPath: /config/gleaner.yaml
          subPath: gleaner.yaml
        - name: gleaner-context
          mountPath: /config
      containers:
      - name: write-to-triplestore
        image: bitnami/minio-client:2022
        env:
        - name: MINIO_CLIENT_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key:  minioAccessKey
              name: {{ .Release.Name }}-secrets
        - name: MINIO_CLIENT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key:  minioSecretKey
              name: {{ .Release.Name }}-secrets
        - name: MINIO_SERVER_HOST
          value: {{ include "gleaner.s3system.endpoint" . }}
        - name: MINIO_SERVER_PORT_NUMBER
          value: "{{ .Values.s3system_service.api_port }}"
        command:
        # the first line of the following bash command is supposed to happen automatically, according to
        # the documentation on docker hub, but it does not.
        - /bin/bash
        - -c
        - >
          mc config host add minio "http://${MINIO_SERVER_HOST}:${MINIO_SERVER_PORT_NUMBER}" "${MINIO_CLIENT_ACCESS_KEY}" "${MINIO_CLIENT_SECRET_KEY}" &&
          for i in $(mc find minio/{{ .Values.storageNamespace }}/milled); do
            mc cat $i | curl -X POST -H 'Content-Type:text/rdf+n3;charset=utf-8' --data-binary  @- {{ include "gleaner.triplestore.endpoint" . }}/repositories/{{ .Values.storageNamespace }}/statements
          done
